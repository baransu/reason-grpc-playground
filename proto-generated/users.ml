(************************************************)
(*       AUTOGENERATED FILE - DO NOT EDIT!      *)
(************************************************)
(* Generated by: ocaml-protoc-plugin            *)
(* https://github.com/issuu/ocaml-protoc-plugin *)
(************************************************)
(*
   Source: users.proto
   Syntax: proto3 
   Parameters:
     annot=''
     debug=false
     opens=[]
     int64_as_int=true
     int32_as_int=true
     fixed_as_int=false
*)
(**/**)
module Protobuf' = Protobuf
(**/**)
module Proto = struct
  module rec CreateUserRequest : sig
    val name': unit -> string
    type t = {
      first_name: string;
      last_name: string;
      date_of_birth: int;
    } 
    val to_proto: t -> Protobuf'.Writer.t
    val from_proto: Protobuf'.Reader.t -> t Protobuf'.Result.t
  end = struct 
    let name' () = "Users.proto.CreateUserRequest"
    type t = {
      first_name: string;
      last_name: string;
      date_of_birth: int;
    } 
    let to_proto = 
      let spec = Protobuf'.Serialize.C.( basic (1, string, proto3) ^:: basic (2, string, proto3) ^:: basic (3, int64_int, proto3) ^:: nil ) in
      let serialize = Protobuf'.Serialize.serialize (spec) in
      fun { first_name; last_name; date_of_birth } -> serialize () first_name last_name date_of_birth
    let from_proto =
      let constructor first_name last_name date_of_birth = { first_name; last_name; date_of_birth } in 
      let spec = Protobuf'.Deserialize.C.( basic (1, string, proto3) ^:: basic (2, string, proto3) ^:: basic (3, int64_int, proto3) ^:: nil ) in
      fun reader -> Protobuf'.Deserialize.deserialize (spec) constructor reader
  end
  and CreateUserResponse : sig
    val name': unit -> string
    type t = {
      user: User.t option;
    } 
    val to_proto: t -> Protobuf'.Writer.t
    val from_proto: Protobuf'.Reader.t -> t Protobuf'.Result.t
  end = struct 
    let name' () = "Users.proto.CreateUserResponse"
    type t = {
      user: User.t option;
    } 
    let to_proto = 
      let spec = Protobuf'.Serialize.C.( basic_opt (1, message User.to_proto) ^:: nil ) in
      let serialize = Protobuf'.Serialize.serialize (spec) in
      fun { user } -> serialize () user
    let from_proto =
      let constructor user = { user } in 
      let spec = Protobuf'.Deserialize.C.( basic_opt (1, message User.from_proto) ^:: nil ) in
      fun reader -> Protobuf'.Deserialize.deserialize (spec) constructor reader
  end
  and ReadUserRequest : sig
    val name': unit -> string
    type t = {
      id: string;
    } 
    val to_proto: t -> Protobuf'.Writer.t
    val from_proto: Protobuf'.Reader.t -> t Protobuf'.Result.t
  end = struct 
    let name' () = "Users.proto.ReadUserRequest"
    type t = {
      id: string;
    } 
    let to_proto = 
      let spec = Protobuf'.Serialize.C.( basic (1, string, proto3) ^:: nil ) in
      let serialize = Protobuf'.Serialize.serialize (spec) in
      fun { id } -> serialize () id
    let from_proto =
      let constructor id = { id } in 
      let spec = Protobuf'.Deserialize.C.( basic (1, string, proto3) ^:: nil ) in
      fun reader -> Protobuf'.Deserialize.deserialize (spec) constructor reader
  end
  and ReadUserResponse : sig
    val name': unit -> string
    type t = {
      user: User.t option;
    } 
    val to_proto: t -> Protobuf'.Writer.t
    val from_proto: Protobuf'.Reader.t -> t Protobuf'.Result.t
  end = struct 
    let name' () = "Users.proto.ReadUserResponse"
    type t = {
      user: User.t option;
    } 
    let to_proto = 
      let spec = Protobuf'.Serialize.C.( basic_opt (1, message User.to_proto) ^:: nil ) in
      let serialize = Protobuf'.Serialize.serialize (spec) in
      fun { user } -> serialize () user
    let from_proto =
      let constructor user = { user } in 
      let spec = Protobuf'.Deserialize.C.( basic_opt (1, message User.from_proto) ^:: nil ) in
      fun reader -> Protobuf'.Deserialize.deserialize (spec) constructor reader
  end
  and User : sig
    val name': unit -> string
    type t = {
      id: string;
      first_name: string;
      last_name: string;
      date_of_birth: int;
    } 
    val to_proto: t -> Protobuf'.Writer.t
    val from_proto: Protobuf'.Reader.t -> t Protobuf'.Result.t
  end = struct 
    let name' () = "Users.proto.User"
    type t = {
      id: string;
      first_name: string;
      last_name: string;
      date_of_birth: int;
    } 
    let to_proto = 
      let spec = Protobuf'.Serialize.C.( basic (1, string, proto3) ^:: basic (2, string, proto3) ^:: basic (3, string, proto3) ^:: basic (4, int64_int, proto3) ^:: nil ) in
      let serialize = Protobuf'.Serialize.serialize (spec) in
      fun { id; first_name; last_name; date_of_birth } -> serialize () id first_name last_name date_of_birth
    let from_proto =
      let constructor id first_name last_name date_of_birth = { id; first_name; last_name; date_of_birth } in 
      let spec = Protobuf'.Deserialize.C.( basic (1, string, proto3) ^:: basic (2, string, proto3) ^:: basic (3, string, proto3) ^:: basic (4, int64_int, proto3) ^:: nil ) in
      fun reader -> Protobuf'.Deserialize.deserialize (spec) constructor reader
  end
  module UsersService = struct
    let createUser = 
      ( (module CreateUserRequest : Protobuf'.Service.Message with type t = CreateUserRequest.t ), 
      (module CreateUserResponse : Protobuf'.Service.Message with type t = CreateUserResponse.t ) ) 
    let readUser = 
      ( (module ReadUserRequest : Protobuf'.Service.Message with type t = ReadUserRequest.t ), 
      (module ReadUserResponse : Protobuf'.Service.Message with type t = ReadUserResponse.t ) ) 
  end
end
